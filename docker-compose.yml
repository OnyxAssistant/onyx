services:
  onyx-db:
    image: 'postgres:13'
    container_name: onyx-db
    restart: always
    environment:
      POSTGRES_DB: onyx        
      POSTGRES_USER: onyx          
      POSTGRES_PASSWORD: changeme  
    volumes:
      - ./data:/var/lib/postgresql/data
    networks:
      - onyx-network
  onyx-gateway:
    container_name: onyx-gateway
    image: onyxassistant/onyx-gateway
    restart: always
    env_file:
      - .env
    networks:
      - onyx-network
    depends_on:
      onyx-queue:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gateway.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.services.gateway.loadbalancer.server.port=5000"
      - "traefik.http.routers.gateway.service=gateway"
  onyx-web:
    container_name: onyx-web
    image: onyxassistant/onyx-web
    restart: always
    env_file:
      - .env
    networks:
      - onyx-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`${DOMAIN}`)"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
      - "traefik.http.routers.web.service=web"
  onyx-queue:
    image: rabbitmq
    container_name: 'onyx-queue'
    restart: always
    networks:
      - onyx-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
  onyx-proxy:
    image: traefik:v2.5
    container_name: onyx-proxy
    restart: always
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - onyx-network
    labels:
      - "traefik.enable=true"

networks:
  onyx-network:
    name: onyx-network
    external: true
    driver: bridge